b=c(3.41,3.35,3.25,3.46,3.28)
h=c(2.41,2.31,2.09,2.51,2.16)
y = (5*mean(f) + 5*mean(b) + 5*mean(h))/15
mean(f)
var(f)
(SSB/2)/(SSW/12)
f=c(2.95,2.88,2.75,3.01,2.79)
b=c(3.41,3.35,3.25,3.46,3.28)
h=c(2.41,2.31,2.09,2.51,2.16)
y = (5*mean(f) + 5*mean(b) + 5*mean(h))/15
SSB = 5*(mean(f) - y)^2 + 5*(mean(b) - y)^2 + 5*(mean(h) - y)^2
SSW = 4*var(f) + 4*var(b) + 4*var(h)
(SSB/2)/(SSW/12)
ln(2)
aic(24, 361, 0)
aic(24, 72, 5)
aic(24, 361, 1)
aic(24, 72, 6)
72/361
1- (72/361)
rnorm(2,1)
dnorm(2,1)
?rnorm
options(scipen = 1, digits = 4, width = 80)
library(knitr)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE,
message=FALSE, warning=FALSE)
rn = rnorm(100, 2, 1)
rn
rn = rnorm(100, 2, 1)
#2
mu = mean(rn)
mu
cor(rn)
#1
rn = rnorm(100, 2, 1)
#2
mu = mean(rn)
#3
B = 200
n = 100
R = numeric(B)
for (b in 1:B) {
i = sample(1:n, size = n, replace = TRUE)
rn2 = rn[i]
R[b] <-mean(rn2)
}
sd(R)
sd(rn)
sd(rn)/10
#1
rn = rnorm(100, 2, 1)
#2
mu = mean(rn)
#3
B = 200
n = 100
R = numeric(B)
for (b in 1:B) {
i = sample(1:n, size = n, replace = TRUE)
rn2 = rn[i]
R[b] <-mean(rn2)
}
sd(R)
#1
rn = rnorm(100, 2, 1)
#2
mu = mean(rn)
#3
B = 200
n = 100
R = numeric(B)
for (b in 1:B) {
i = sample(1:n, size = n, replace = TRUE)
rn2 = rn[i]
R[b] <-mean(rn2)
}
sd(R)
#1
rn = rnorm(100, 2, 1)
#2
mu = mean(rn)
#3
B = 200
n = 100
R = numeric(B)
for (b in 1:B) {
i = sample(1:n, size = n, replace = TRUE)
rn2 = rn[i]
R[b] <-mean(rn2)
}
sd(R)
knitr::opts_chunk$set(echo = TRUE)
Wheat = c(5.2,4.5,6.0,6.1,6.7,5.7)
Barley = c(6.5,8.0,6.1,7.5,5.9,5.6)
Maize = c(5.8,4.7,6.4,4.9,6.0,5.2)
Oats = c(8.3,6.1,7.8,7.0,5.6,7.2)
Grain <- c(rep("Wheat",6),rep("Barley",6),rep("Maize",6),rep("Oats",6))
Thiamin <- c(Wheat,Barley,Maize,Oats)
dat = as.data.frame(Thiamin,Grain)
dat
rep("Wheat",6)
Grain
Grain
pairwise.t.test(Thiamin,Grain,data=dat, p.adj = "bonf", pool.sd = T)
aovfit=aov(Thiamin~Grain,data=dat)
TukeyHSD(aovfit)$Grain
qt
?qt
qt(0.95)
qt(0.95, df = 6)
qt(0.95, df = 5)
qf(0.95, df = 5)
qf
?qf
qf(0.95, 4-1, 6-4)
qf(0.95, 3, 2)
tval = qt(0.95, df = 2)
fval = qf(0.95, 4-1, 6-4)
tval
knitr::opts_chunk$set(echo = TRUE)
array = c("mmm", "aapl")
data1 = c()
for (i in 1:len(array)) {
data.append(read.table("../Stocks/" + array[i], sep=",", header=TRUE))
}
array = c("mmm", "aapl")
data1 = c()
for (i in 1:length(array)) {
data.append(read.table("../Stocks/" + array[i], sep=",", header=TRUE))
}
array = c("mmm", "aapl")
data1 = c()
for (i in 1:length(array)) {
data1.append(read.table("../Stocks/" + array[i], sep=",", header=TRUE))
}
array = c("mmm", "aapl")
data1 = c(length = length(array))
for (i in 1:length(array)) {
data1.append(read.table("../Stocks/" + array[i], sep=",", header=TRUE))
}
array = c("mmm", "aapl")
data1 = c(length = length(array))
for (i in 1:length(array)) {
data1[i] = read.table("../Stocks/" + array[i], sep=",", header=TRUE)
}
array = c("mmm", "aapl")
data1 = c(length = length(array))
for (i in 1:length(array)) {
data1[i] = read.table("../Stocks/mmm", sep=",", header=TRUE)
}
array = c("mmm", "aapl")
data1 = c(length = length(array))
for (i in 1:length(array)) {
data1[i] = read.table("../Stocks/mmm.us.txt", sep=",", header=TRUE)
}
data1
array = c("mmm", "aapl")
data1 = c(length = length(array))
for (i in 1:length(array)) {
data1[i] = read.table("../Stocks/mmm.us.txt", sep=",", header=TRUE)
}
data1
data1
array = c("mmm", "aapl")
data1 = c(0, 0)
for (i in 1:length(array)) {
data1[i] = read.table("../Stocks/mmm.us.txt", sep=",", header=TRUE)
}
data1
array = c("mmm", "aapl")
data1 = array(data = NA, dim  = 2)
for (i in 1:length(array)) {
data1[i] = read.table("../Stocks/mmm.us.txt", sep=",", header=TRUE)
}
data1
read.table("../Stocks/mmm.us.txt", sep=",", header=TRUE)
read.table("../Stocks/mmm.us.txt", sep=",", header=TRUE) -> hhh
array = c("mmm", "aapl")
data1 = array(data = NA, dim  = 2)
for (i in 1:length(array)) {
data1[i] = read.table("../Stocks/mmu.us.txt", sep=",", header=TRUE)
}
data1
read.table("../Stocks/mmu.us.txt", sep=",", header=TRUE) -> hello
hello = read.table("../Stocks/mmu.us.txt", sep=",", header=TRUE)
read.table("../Stocks/mmu.us.txt", sep=",", header=TRUE)
cd stat428
setwd(stat428)
setwd("stat428")
setwd("Project/Market_Analysis/")
ls
read.table("../Stocks/mmu.us.txt", sep=",", header=TRUE) -> hello
h = array()
h[1]
read.table("../Stocks/mmu.us.txt", sep=",", header=TRUE) -> h[1]
h[1]
df = data.frame
?data.frame
hello
h1
hello
h1 = c(hello, hello)
h1
h1[0]
h1[1]
View(h1[1])
matrix(2,2,2)
matrix(2,2,2,2)
?matrix
hello
hh = list(hello, hello)
hh[1]
hh1 = list(dim = 2)
hh1[1] = hello
hh1
hh1
hh2 = list()
hh2.append(hello)
?list()
hh2 = list(dim = 2)
hh2
hh2 = list()
hh2
hh2[[1]] <- hello
hh2
hh2[[1]]
hh2[[2]] <- hello
hh2
hh2[[1]]
mmm = read.table("../Stocks/mmm.us.txt", sep=",", header=TRUE)
mmm[3] <- NULL
mmm[3] <- NULL
mmm[4] <- NULL
mmm[4] <- NULL
mmm
mmm$Return <- (mmm$Open - mmm$Close)/mmm$Close
mmm_open <- mmm[which(mmm$Date == "2005-03-01"),]$Open
mmm_close <- mmm[which(mmm$Date == "2005-04-01"),]$Close
mmm_2005 <- (mmm_close-mmm_open)/mmm_close
array = c("mmm", "aapl")
#data1 = array(data = NA, dim  = 2)
stocks = list()
for (i in 1:length(array)) {
stocks[[i]] = read.table("../Stocks/mmm.us.txt", sep=",", header=TRUE)
}
stocks[[1]]
install.packages("stringr")
install.packages("stringr")
install.packages("readr")
knitr::opts_chunk$set(echo = TRUE)
mu <- 1
sigma.2 <- 0
n <- 50
x <- seq(IndexStart, 50, 1)
IndexStart <- 1
mu <- 1
sigma.2 <- 0
n <- 50
x <- seq(IndexStart, 50, 1)
L = function(mu, sigma.2, n, x){
return((2*pi*sigma.2)^(-n/2))*exp(-1/2*sigma.2)*sum(x - mu)^2
}
L(0,1, n, readValues$rets)
posterior = L(0,1, n, readValues$rets) * g_prior(x, theta, var1, alpha, beta)
theta <- 0
var1 <- 1
alpha <- 1
beta <- 1
g_prior = function(x, theta, var1, alpha, beta) {
return(dnorm(x, theta, var1)*1/dgamma(x, alpha, beta))
}
x <- rnorm(50)   # Must change to rnorm(500)
g_prior(x, theta, var1, alpha, beta)
plot(x)
IndexStart <- 1
mu <- 1
sigma2 <- 0
n <- 50
x <- seq(IndexStart, 50, 1)
L = function(mu, sigma2, n, x){
return((2*pi*sigma2)^(-n/2))*exp(-1/2*sigma2*sum(x - mu)^2)
}
posterior = L(0,1, n, readValues$rets) * g_prior(x, theta, var1, alpha, beta)
posterior
hist(posterior)
hist(posterior[posterior != 0])
post = posterior[posterior!= 0]
post
hist(post)
post
hist(post, xlim = c(0,1), ylim = c(0,50))
hist(post, xlim = c(0,.1), ylim = c(0,50))
hist(post, xlim = c(-0.1,.1), ylim = c(0,50))
g_prior(x, theta, var1, alpha, beta)
readValues$rets
readValues$rets
readValues
set.seed(679)
#Run code
stocks = readInStocks(5)
set.seed(679)
#Run code
stocks = readInStocks(50)
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(readr)
readInStocks = function(n) {
# Gives n random stocks from the S & P 500
#
# Args:
#   n: Number of stocks to be read
#
# Returns:
#   List of dataframes with each stock's close value for each day
snp = read_csv("Stocks.csv")
nums = sample(1:500, n)
arr100 = snp$Symbol[nums]
sec100 = snp$Sector[nums]
array = arr100
stocks_2005 = list()
for (i in 1:n) {
dir = c("../Stocks/", as.character(array[i]), ".us.txt")
dir2 = str_c(dir, collapse = "")
print(dir2)
if(!file.exists(dir2)) {
next
}
stock = read.table(dir2, sep=",", header=TRUE)
stock[3] <- NULL
stock[3] <- NULL
stock[4] <- NULL
stock[4] <- NULL
stock[2] <- NULL
stock$name <- array[i]
stocks_2005[[i]] <- stock
}
return(stocks_2005)
}
closeDiffPct = function(n, firstDate, secondDate, stocks_2005) {
# Gives difference in close values from firstDate to secondDate
#
# Args:
#   n: Number of stocks to be read that are in stocks_2005
#   firstDate: The first Date
#   seconDate: The second Date
#   stocks_2005: List of stock dataframes
#
# Returns:
#   A dataframe with the difference in percentage of close values,
#   with the stock name next to it
rets = numeric(n)
names = c()
for (i in 1:n) {
stock_df = stocks_2005[[i]]
stock_df$Date = as.character(stock_df$Date)
firstN = which(stock_df$Date == firstDate)
secondN = which(stock_df$Date == secondDate)
#print(firstN)
#print(secondN)
if ((is.integer(firstN) && length(firstN) == 0) |
(is.integer(secondN) && length(secondN) == 0)) {
names = c("", names)
next
}
stock_close_03 <- stock_df[firstN,]$Close
stock_close_04 <- stock_df[secondN,]$Close
s_2005 <- (stock_close_04-stock_close_03)/stock_close_03
#print(s_2005)
rets[i] = s_2005
names = c(stock_df$name[1], names)
}
return2005 = data.frame(rets, names)
return2005
return(return2005)
}
set.seed(679)
#Run code
stocks = readInStocks(50)
readValues = closeDiffPct(50, "2005-03-01", "2005-04-01", stocks)
readValues
hist(readValues$rets)
mu = mean(readValues$rets)
var = var(readValues$rets)
mu
var
hist(readValues$rets)
mean(readValues$rets)
var(readValues$rets)
theta <- 0
var1 <- 1
alpha <- 1
beta <- 1
g_prior = function(x, theta, var1, alpha, beta) {
return(dnorm(x, theta, var1)*1/dgamma(x, alpha, beta))
}
x <- rnorm(50)   # Must change to rnorm(500)
g_prior(x, theta, var1, alpha, beta)
plot(x)
IndexStart <- 1
mu <- 1
sigma2 <- 0
n <- 50
x <- seq(IndexStart, 50, 1)
L = function(mu, sigma2, n, x){
return((2*pi*sigma2)^(-n/2))*exp(-1/2*sigma2*sum(x - mu)^2)
}
posterior = L(0,1, n, readValues$rets) * g_prior(x, theta, var1, alpha, beta)
post = posterior[posterior!= 0]
hist(post, xlim = c(-0.1,.1), ylim = c(0,50))
g_prior(x, theta, var1, alpha, beta)
hist(gp)
gp = g_prior(x, theta, var1, alpha, beta)
hist(gp)
theta <- 0
var1 <- 1
alpha <- 1
beta <- 1
g_prior = function(x, theta, var1, alpha, beta) {
return(dnorm(x, theta, var1))#*1/dgamma(x, alpha, beta))
}
x <- rnorm(50)   # Must change to rnorm(500)
g_prior(x, theta, var1, alpha, beta)
plot(x)
IndexStart <- 1
mu <- 1
sigma2 <- 0
n <- 50
x <- seq(IndexStart, 50, 1)
L = function(mu, sigma2, n, x){
return((2*pi*sigma2)^(-n/2))*exp(-1/2*sigma2*sum(x - mu)^2)
}
posterior = L(0,1, n, readValues$rets) * g_prior(x, theta, var1, alpha, beta)
post = posterior[posterior!= 0]
hist(post, xlim = c(-0.1,.1), ylim = c(0,50))
gp = g_prior(x, theta, var1, alpha, beta)
hist(gp)
theta <- 0
var1 <- 1
alpha <- 1
beta <- 1
g_prior = function(x, theta, var1, alpha, beta) {
return(dnorm(x, theta, var1)*1/dgamma(x, alpha, beta))
}
x <- rnorm(50)   # Must change to rnorm(500)
g_prior(x, theta, var1, alpha, beta)
plot(x)
IndexStart <- 1
mu <- 1
sigma2 <- 0
n <- 50
x <- seq(IndexStart, 50, 1)
L = function(mu, sigma2, n, x){
return((2*pi*sigma2)^(-n/2))*exp(-1/2*sigma2*sum(x - mu)^2)
}
posterior = L(0,1, n, readValues$rets) * g_prior(x, theta, var1, alpha, beta)
post = posterior[posterior!= 0]
hist(post, xlim = c(-0.1,.1), ylim = c(0,50))
gp = g_prior(x, theta, var1, alpha, beta)
IndexStart <- 1
mu <- 1
sigma2 <- 0
n <- 50
x <- seq(IndexStart, 50, 1)
L = function(mu, sigma2, n, x){
return((2*pi*sigma2)^(-n/2))*exp(-1/2*sigma2*sum(x - mu)^2)
}
rets = readValues$rets
posterior = L(mean(rets),var(rets), n, rets) * g_prior(x, theta, var1, alpha, beta)
post = posterior[posterior!= 0]
hist(post, xlim = c(-0.1,.1), ylim = c(0,50))
gp = g_prior(x, theta, var1, alpha, beta)
IndexStart <- 1
mu <- 1
sigma2 <- 0
n <- 50
x <- seq(IndexStart, 50, 1)
L = function(mu, sigma2, n, x){
return((2*pi*sigma2)^(-n/2))*exp(-1/2*sigma2*sum(x - mu)^2)
}
rets = readValues$rets
posterior = L(0,1, n, rets) * g_prior(x, theta, var1, alpha, beta)
post = posterior[posterior!= 0]
hist(post, xlim = c(-0.1,.1), ylim = c(0,50))
gp = g_prior(x, theta, var1, alpha, beta)
IndexStart <- 1
mu <- 1
sigma2 <- 0
n <- 50
x <- seq(IndexStart, 50, 1)
L = function(mu, sigma2, n, x){
return((2*pi*sigma2)^(-n/2))*exp(-1/2*sigma2*sum(x - mu)^2)
}
rets = readValues$rets
posterior = L(mean(rets),var(rets), n, rets) * g_prior(x, theta, var1, alpha, beta)
post = posterior[posterior!= 0]
hist(post, xlim = c(-0.1,.1), ylim = c(0,50))
gp = g_prior(x, theta, var1, alpha, beta)
IndexStart <- 1
mu <- 1
sigma2 <- 0
n <- 50
x <- seq(IndexStart, 50, 1)
L = function(mu, sigma2, n, x){
return((2*pi*sigma2)^(-n/2))*exp(-1/2*sigma2*sum(x - mu)^2)
}
rets = readValues$rets
posterior = L(mean(rets),var(rets), n, rets) * g_prior(x, theta, var1, alpha, beta)
post = posterior[posterior!= 0]
hist(post, xlim = c(-0.1,40), ylim = c(0,50))
gp = g_prior(x, theta, var1, alpha, beta)
